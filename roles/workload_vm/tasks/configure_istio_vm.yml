- name: "Extract Istio Cluster version and revision"
  set_fact:
    istio_version: "{{ istio_clusters[istio_cluster].version }}"
    istio_revision: "{{ istio_clusters[istio_cluster].version  | kameshsampath.kubernetes_spices.version_to_revision }}"

- name: 'Using Istio Version'
  debug:
   var: istio_version

- name: 'Using Istio Revision'
  debug:
   var: istio_revision

- name: "Download Istio"
  get_url:
    url: "https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-amd64.tar.gz"
    checksum: "sha256:https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-amd64.tar.gz.sha256"
    dest: "/tmp"

- name: "Extract Istio {{ istio_version }}"
  unarchive:
    src: "/tmp/istio-{{ istio_version }}-linux-amd64.tar.gz"
    dest: "{{ ansible_env.HOME }}"
    remote_src: yes
  register: istio_install

- name: "Update .bashrc"
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK Istio {{ istio_version }}"
    block: |
      ISTIO_HOME=~{{ ansible_user }}/istio-{{ istio_version }}
      PATH=$ISTIO_HOME/bin:$PATH
    dest: ~{{ ansible_user }}/.bashrc
  when: istio_install

- name: "Clean existing Istio VM files"
  include_tasks: clean_istio_vm_files.yml
  when: clean_istio_vm_files | bool

- name: "Lookup Istio Ingress Gateway"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: "{{ workload_istio_gateway_ns }}"
    name: "{{ workload_istio_svc_name }}"
    context: "{{ gloo_clusters.cluster1.k8s_context }}"
  register: istio_ingress_gw_result

# - debug:
#    var: istio_ingress_gw_result

- name: "Get LoadBalancer Address"
  set_fact:
    ingress_gw_lb_addr: "{{ istio_ingress_gw_result.resources[0] | community.general.json_query('status.loadBalancer.ingress[*]')}}"
  when: not use_nodeport

# - debug:
#     var: ingress_gw_lb_addr

- name: "A record (IPV4 address) lookup for LoadBalancer"
  set_fact:
    lb_ips: "{{ lookup('community.general.dig',ingress_gw_lb_addr[0].hostname) | split(',') }}"
    multi_lb: True
  when: ingress_gw_lb_addr[0].hostname is defined and ingress_gw_lb_addr | length > 0 and not use_nodeport

- name: "Set LoadBalancer IP"
  set_fact:
    lb_ips: "{{ ingress_gw_lb_addr[0].ip }}"
    one_lb: True
  when: not use_nodeport and ingress_gw_lb_addr[0].ip is defined and ingress_gw_lb_addr | length > 0

- name: "Istio Cluster Node IP"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: cluster1
    context: "cluster1"
  register: node_ip_result

- name: "Set Istiod NodePort"
  set_fact:
    istiod_nodeport: "{{ istio_ingress_gw_result.resources | first | community.general.json_query(istiod_nodeport_query) | first }}"
  when:  use_nodeport

- name: "Set LoadBalancer IP"
  set_fact:
    lb_ips: "{{ node_ip_result.resources | first | json_query('status.addresses[?type==`InternalIP`].address') | first }}"
    one_lb: True
  when:  use_nodeport

- name: "Debug Istio Ingress LB IPs"
  debug:
    var: lb_ips

- name: "Remove istiod entry to hosts file"
  become: yes
  blockinfile:
    state: absent
    marker: "# {mark} ANSIBLE MANAGED BLOCK-istiod"
    path: "/etc/hosts"
    block: "{{ lookup('template','istiod-hosts.j2') }}"
  notify:
    - "Restart Istio"

- name: "Add istiod entry to hosts file"
  become: yes
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK-istiod"
    path: "/etc/hosts"
    block: "{{ lookup('template','istiod-hosts.j2') }}"
  notify:
    - "Restart Istio"

- name: "Add routes to {{ istio_cluster }} Kubernetes Sevices/Pods"
  ansible.utils.update_fact:
    updates: 
     -  path: "current_netplan.network.ethernets[{{ default_ipv4_interface }}].routes"
        value: 
           - to: "{{ istio_cluster_service_ip_cidr }}"
             via: "{{ node_ip_result.resources | first | json_query('status.addresses[?type==`InternalIP`].address') | first }}"         
           - to:  "{{ istio_cluster_pod_ip_cidr }}"
             via: "{{ node_ip_result.resources | first | json_query('status.addresses[?type==`InternalIP`].address') | first }}"
  register: updated_netplan

- name: "Updated netplan" 
  debug: 
    var: updated_netplan.current_netplan
    
- name: Update netplan
  become: yes
  ansible.builtin.copy:
    dest: /etc/netplan/50-cloud-init.yaml
    content: "{{ updated_netplan.current_netplan | to_nice_yaml(indent=2)  }}"
  when: updated_netplan.changed
  notify:
    - Apply netplan

- name: Deploy East West Gateway
  kubernetes.core.k8s:
    context: "{{ istio_clusters[istio_cluster].k8s_context }}"
    state: present
    namespace: "{{ workload_istio_gateway_ns }}"
    template:
      - path: "gateways/east-west-gateway.yaml.j2"
      - path: "gateways/istiod-gateway.yaml.j2"
      - path: "gateways/istiod-vs.yaml.j2"
  vars:
    istio_version: "{{ istio_clusters[istio_cluster].version }}"
    istio_revision: "{{ istio_clusters[istio_cluster].version | kameshsampath.kubernetes_spices.version_to_revision }}"
  when: istio_clusters[istio_cluster].install

- name: Deploy istiod Wrapper Service
  kubernetes.core.k8s:
    context: "{{ istio_clusters[istio_cluster].k8s_context }}"
    state: present
    namespace: "{{ workload_istio_ns }}"
    template:
      - path: "gateways/istiod-wrapper-service.yaml.j2"
  vars:
    istio_version: "{{ istio_clusters[istio_cluster].version }}"
    istio_revision: "{{ istio_clusters[istio_cluster].version | kameshsampath.kubernetes_spices.version_to_revision }}"
  when: istio_clusters[istio_cluster].install
      
- name: "Create or Update VM Workload Namespace"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters[istio_cluster].k8s_context }}"
    template:
      path: 'istio/namespace.yaml.j2'

- name: "Create or Update VM Workload ServiceAccount"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters[istio_cluster].k8s_context }}"
    template:
      path: 'istio/sa.yaml.j2'
    
- name: "Create or Update VM Workload in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters.mgmt.k8s_context }}"
    template:
      path: 'istio/workload.yaml.j2'

- name: "Create or Update VM Destination in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters.mgmt.k8s_context }}"
    template:
      path: 'istio/destination.yaml.j2'

- name: "Create or Update VM Workload Service in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters.cluster1.k8s_context }}"
    template:
      path: 'istio/service.yaml.j2'

- name: "Create or Update VM Workload Entry in Cluster"
  kubernetes.core.k8s:
    state: present
    context: "{{ gloo_clusters.cluster1.k8s_context }}"
    template:
      path: 'istio/workload-entry.yaml.j2'

- name: "Create Istio Work Dir"
  file:
    path: "{{ istio_vm_workdir }}"
    recurse: True
    state: directory

- name: "Create workload YAML"
  template:
    dest: "{{ istio_vm_workdir }}/workload-group.yaml"
    src: "istio/workload-group.yaml.j2"

- name: "Generate Workload Files"
  ansible.builtin.command:
    argv:
      - "~{{ ansible_user }}/istio-{{ istio_version }}/bin/istioctl"
      - x
      - workload
      - entry
      - configure
      - "--file"
      - "{{ istio_vm_workdir }}/workload-group.yaml"
      - "--output"
      - "{{ istio_vm_workdir }}"
      - "--clusterID"
      - "{{ istio_cluster }}"
      - "--kubeconfig"
      - "~{{ ansible_user }}/.kube/config"
      - "--context"
      - "{{ gloo_clusters[istio_cluster].k8s_context }}"
      - "--revision"
      - "{{ istio_revision }}"
  register: workload_entry_create

- name: "Install Istio Sidecar(Debian)"
  become: yes
  ansible.builtin.apt:
    deb: "https://storage.googleapis.com/istio-release/releases/{{ istio_version }}/deb/istio-sidecar.deb"
  when: ansible_os_family == "Debian"

- name: "Install Istio Sidecar(RedHat)"
  become: yes
  ansible.builtin.dnf:
    name: "https://storage.googleapis.com/istio-release/releases/{{ istio_version }}/rpm/istio-sidecar.rpm"
    disable_gpg_check: yes
  when: ansible_os_family == "RedHat"

- name: "Enable Istio"
  become: yes
  service:
    name: istio
    enabled: true

- name: "Create Required Directories"
  become: yes
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - /etc/certs
    - /var/run/secrets/tokens
    - /etc/istio/proxy

- name: "Set Istiod Service IP"
  become: yes
  lineinfile:
    backup: yes
    backrefs: yes
    path: /etc/istio/envoy/sidecar.env
    regexp: ^\s*#\s*(\s*ISTIO_SVC_IP=).*$
    line: \g<1>{{ istio_svc_ip }}

- name: "Set Istiod CA_ADDR"
  become: yes
  lineinfile:
    backup: yes
    backrefs: yes
    path: /etc/istio/envoy/sidecar.env
    regexp: ^\s*#\s*(\s*CA_ADDR=).*$
    line: \g<1>istiod-{{ istio_revision }}.istio-system.svc:{{ istiod_port }}

- name: "Set Istiod CA_ADDR"
  become: yes
  lineinfile:
    backup: yes
    backrefs: yes
    path: /etc/istio/envoy/sidecar.env
    regexp: ^#(\s*CA_ADDR=).*$
    line: \g<1>istiod-{{ istio_revision }}.istio-system.svc:{{ istiod_nodeport }}
  when: use_nodeport

- name: "Install the root certificate root-cert.pem"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/root-cert.pem"
    dest: /etc/certs/root-cert.pem
    remote_src: yes
  notify:
  - "Restart Istio"

- name: "Install the token istio-token"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/istio-token"
    dest: /var/run/secrets/tokens/istio-token
    remote_src: yes
  notify:
  - "Restart Istio"

- name: "Install cluster.env"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/cluster.env"
    dest: /var/lib/istio/envoy/cluster.env
    remote_src: yes
  notify:
  - "Restart Istio"

- name: "Set Istiod CA_ADDR in mesh config"
  become: yes
  lineinfile:
    backup: yes
    backrefs: yes
    path: "{{ istio_vm_workdir }}/mesh.yaml"
    regexp: ^(\s*discoveryAddress:\s*).*$
    line: \g<1>istiod-{{ istio_revision }}.istio-system.svc:{{ istiod_nodeport }}
  when: use_nodeport

- name: "Install the Mesh Config"
  become: yes
  copy:
    src: "{{ istio_vm_workdir }}/mesh.yaml"
    dest: /etc/istio/config/mesh
    remote_src: yes
  notify:
  - "Restart Istio"

- name: "Set Right Ownership on file {{ item }}"
  become: yes
  file:
    dest: "{{ item }}"
    owner: "istio-proxy"
  with_items:
    - /etc/certs/root-cert.pem
  loop_control:
    label: "{{ item }}"

- name: "Set Right Ownership on {{ item }} directories"
  become: yes
  file:
    dest: "{{ item }}"
    recurse: yes
    owner: "istio-proxy"
  with_items:
    - /var/lib/istio
    - /etc/certs
    - /etc/istio/proxy
    - /etc/istio/config
    - /var/run/secrets
  loop_control:
    label: "{{ item }}"

