# Vagrant Insecure Key pair 
https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant
https://raw.githubusercontent.com/hashicorp/vagrant/main/keys/vagrant.pub

# Prepare Env

mkdir -p "$KUBECONFIG_DIR"

# Management
multipass launch --name mgmt --cpus 4 --mem 4g --disk 20g
multipass exec mgmt -- bash -c "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.8+k3s1 K3S_KUBECONFIG_MODE="644" sh -"
export MGMT_IP=$(multipass info mgmt --format json  | jq -r '.info.mgmt.ipv4[0]')

# Copy kubeconfig
multipass exec mgmt sudo cat /etc/rancher/k3s/k3s.yaml > $KUBECONFIG_DIR/mgmt_k3s.yaml
sed -i -E "s|127.0.0.1|${MGMT_IP}|" $KUBECONFIG_DIR/mgmt_k3s.yaml
sed -i -E "s|(^.*:\s*)(default)|\1mgmt|g" $KUBECONFIG_DIR/mgmt_k3s.yaml

# Workload 1
multipass launch --name cluster1 --cpus 4 --mem 6g --disk 20g
multipass exec cluster1 -- bash -c "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.8+k3s1 K3S_KUBECONFIG_MODE="644" sh -"
export CLUSTER1_IP=$(multipass info cluster1 --format json  | jq -r '.info.cluster1.ipv4[0]')

# Copy kubeconfig
multipass exec cluster1 sudo cat /etc/rancher/k3s/k3s.yaml > $KUBECONFIG_DIR/cluster1_k3s.yaml
sed -i -E "s|127.0.0.1|${CLUSTER1_IP}|" $KUBECONFIG_DIR/cluster1_k3s.yaml
sed -i -E "s|(^.*:\s*)(default)|\1cluster1|g" $KUBECONFIG_DIR/cluster1_k3s.yaml

# Workload 2
multipass launch --name cluster2 --cpus 4 --mem 6g --disk 20g
multipass launch --name cluster2 --cpus 4 --mem 6g --disk 20g
multipass exec cluster1 -- bash -c "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.8+k3s1 K3S_KUBECONFIG_MODE="644" sh -"

export KUBECONFIG_FILES="$KUBECONFIG_DIR/mgmt_k3s.yaml:$KUBECONFIG_DIR/cluster1_k3s.yaml"

kubectl --kubeconfig="$KUBECONFIG_FILES" config view --flatten > "$KUBECONFIG_DIR/config"

# Istio  and Gloo Mesh Deployment


export KUBECONFIG="$KUBECONFIG_DIR/config"


envsubst < ./istio/istio.yaml | kubectl --context=$CLUSTER1 apply -n istio-system -f -

kustomize build ./istio/istio.yaml | envsubst | kubectl --context=$CLUSTER1 apply -n istio-system -f -

# Gloo Deployment

helm repo add gloo-mesh-enterprise https://storage.googleapis.com/gloo-mesh-enterprise/gloo-mesh-enterprise

helm repo update

kubectl --context ${MGMT} create ns gloo-mesh

helm upgrade --install gloo-mesh-enterprise gloo-mesh-enterprise/gloo-mesh-enterprise \
--namespace gloo-mesh --kube-context ${MGMT} \
--version=${GLOO_EE_VERSION} \
--set rbac-webhook.enabled=true \
--set licenseKey=${GLOO_MESH_LICENSE_KEY} \
--set "rbac-webhook.adminSubjects[0].kind=Group" \
--set "rbac-webhook.adminSubjects[0].name=system:masters"
kubectl --context ${MGMT} -n gloo-mesh rollout status deploy/enterprise-networking


export ENDPOINT_GLOO_MESH=$(kubectl --context ${MGMT} -n gloo-mesh get svc enterprise-networking -o jsonpath='{.status.loadBalancer.ingress[0].*}'):9900
export HOST_GLOO_MESH=$(echo ${ENDPOINT_GLOO_MESH} | cut -d: -f1)

meshctl cluster register --mgmt-context=${MGMT} --remote-context=${CLUSTER1} --relay-server-address=${ENDPOINT_GLOO_MESH} enterprise cluster1 --cluster-domain cluster.local